/*******************************************************************************
 * Copyright (C) 2010-2019 Goran Schwarz
 * 
 * This file is part of DbxTune
 * DbxTune is a family of sub-products *Tune, hence the Dbx
 * Here are some of the tools: AseTune, IqTune, RsTune, RaxTune, HanaTune, 
 *          SqlServerTune, PostgresTune, MySqlTune, MariaDbTune, Db2Tune, ...
 * 
 * DbxTune is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * DbxTune is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DbxTune.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/
package com.microsoft.sqlserver.jdbc;

public interface ISQLServerMessageHandler
{
    /**
     * You can use the ISQLServerMessageHandler interface to customize the way JDBC handles error messages generated by the SQL Server. 
     * Implementing ISQLServerMessageHandler in your own class for handling error messages can provide the following benefits:
     * <ul>
     *   <li><b>"message feedback"</b><br>
     *       Display Server messages from a long running SQL Statement<br>
     *       Like <code>RAISERROR ('Progress message...', 0, 1) WITH NOWAIT</code><br>
     *       Or Status message from a running backup...<br>
     *   </li>
     *   <li><b>"Universal" error logging</b><br>
     *       Your error-message handler can contain the logic for handling all error logging.
     *   </li>
     *   <li><b>"Universal" error handling</b><br>
     *       Error-handling logic can be placed in your error-message handler, instead of being repeated throughout your application.
     *   </li>
     *   <li><b>Remapping of error-message severity</b>, based on application requirements<br>
     *       Your error-message handler can contain logic for recognizing specific error messages, and downgrading or upgrading 
     *       their severity based on application considerations rather than the severity rating of the server. 
     *       For example, during a cleanup operation that deletes old rows, you might want to downgrade the severity of a 
     *       message that a row does not exist. However, you may want to upgrade the severity in other circumstances.
     *   </li>
     * </ul>
     * 
     * Example code:
     * <pre>
     *  public ISQLServerMessage messageHandler(ISQLServerMessage srvErrorOrWarning)
     *  {
     *      ISQLServerMessage retObj = srvErrorOrWarning;
     *
     *      if (srvErrorOrWarning.isErrorMessage()) {
     *
     *          // Downgrade: 2601 -- Cannot insert duplicate key row...
     *          if (2601 == srvErrorOrWarning.getErrorNumber()) {
     *              retObj = srvErrorOrWarning.getSQLServerMessage().toSQLServerInfoMessage();
     *          }
     *
     *          // Discard: 3701 -- Cannot drop the table ...
     *          if (3701 == srvErrorOrWarning.getErrorNumber()) {
     *              retObj = null;
     *          }
     *      }
     *
     *      return retObj;
     *  }
    
     * </pre>
     * 
     * @param srvErrorOrWarning
     * @return 
     * <ul>
     *   <li><b>unchanged</b> same object as passed in.<br>
     *       The JDBC driver will works as if no message hander was installed<br>
     *       Possibly used for logging functionality<br>
     *   </li>
     *   <li><b>null</b><br>
     *       The JDBC driver will <i>discard</i> this message. No SQLException will be thrown
     *   </li>
     *   <li><b>SQLServerInfoMessage</b> object<br>
     *       Create a "SQL warning" from a input database error, and return it. 
     *       This results in the warning being added to the warning-message chain.
     *   </li>
     *   <li><b>SQLServerError</b> object<br>
     *       If the originating message is a SQL warning (SQLServerInfoMessage object), messageHandler can evaluate 
     *       the SQL warning as urgent and create and return a SQL exception (SQLServerError object)
     *       to be thrown once control is returned to the JDBC Driver.
     *   </li>
     * </ul>
     */
    ISQLServerMessage messageHandler(ISQLServerMessage srvErrorOrWarning);
}
